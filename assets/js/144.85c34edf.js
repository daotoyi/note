(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{689:function(t,a,s){"use strict";s.r(a);var e=s(20),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"python-中最常用的-5-种线程锁你会用吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-中最常用的-5-种线程锁你会用吗"}},[t._v("#")]),t._v(" Python 中最常用的 5 种线程锁你会用吗？")]),t._v(" "),s("blockquote",[s("h2",{attrs:{id:"excerpt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#excerpt"}},[t._v("#")]),t._v(" Excerpt")]),t._v(" "),s("p",[t._v("Python 中最常用的 5 种线程锁你会用吗？")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本文将继续围绕 threading 模块讲解，基本上是纯理论偏多。")]),t._v(" "),s("p",[t._v("对于日常开发者来讲很少会使用到本文的内容，但是对框架作者等是必备知识，同时也是高频的面试常见问题。")]),t._v(" "),s("p",[t._v("官方文档("),s("a",{attrs:{href:"https://docs.python.org/zh-cn/3.6/library/threading.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.python.org/zh-cn/3.6/library/threading.html"),s("OutboundLink")],1),t._v(")")]),t._v(" "),s("h2",{attrs:{id:"线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[t._v("#")]),t._v(" 线程安全")]),t._v(" "),s("p",[t._v("线程安全是多线程或多进程编程中的一个概念，在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。")]),t._v(" "),s("p",[t._v("线程安全的问题最主要还是由线程切换导致的，比如一个房间（进程）中有10颗糖（资源），除此之外还有3个小人（1个主线程、2个子线程），当小人A吃了3颗糖后被系统强制进行休息时他认为还剩下7颗糖，而当小人B工作后又吃掉了3颗糖，那么当小人A重新上岗时会认为糖还剩下7颗，但是实际上只有4颗了。")]),t._v(" "),s("p",[t._v("上述例子中线程A和线程B的数据不同步，这就是线程安全问题，它可能导致非常严重的意外情况发生，我们按下面这个示例来进行说明。")]),t._v(" "),s("p",[t._v("下面有一个数值num初始值为0，我们开启2条线程：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("线程1对num进行一千万次+1的操作")])]),t._v(" "),s("li",[s("p",[t._v("线程2对num进行一千万次-1的操作")])])]),t._v(" "),s("p",[t._v("结果可能会令人咋舌，num最后并不是我们所想象的结果0：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上面这就是一个非常好的案例，想要解决这个问题就必须通过锁来保障线程切换的时机。")]),t._v(" "),s("p",[t._v("需要我们值得留意的是，在Python基本数据类型中list、tuple、dict本身就是属于线程安全的，所以如果有多个线程对这3种容器做操作时，我们不必考虑线程安全问题。")]),t._v(" "),s("h2",{attrs:{id:"锁的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的作用"}},[t._v("#")]),t._v(" 锁的作用")]),t._v(" "),s("p",[t._v("锁是Python提供给我们能够自行操控线程切换的一种手段，使用锁可以让线程的切换变的有序。")]),t._v(" "),s("p",[t._v("一旦线程的切换变的有序后，各个线程之间对数据的访问、修改就变的可控，所以若要保证线程安全，就必须使用锁。")]),t._v(" "),s("p",[t._v("threading模块中提供了5种最常见的锁，下面是按照功能进行划分：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("同步锁：lock（一次只能放行一个）")])]),t._v(" "),s("li",[s("p",[t._v("递归锁：rlock（一次只能放行一个）")])]),t._v(" "),s("li",[s("p",[t._v("条件锁：condition（一次可以放行任意个）")])]),t._v(" "),s("li",[s("p",[t._v("事件锁：event（一次全部放行）")])]),t._v(" "),s("li",[s("p",[t._v("信号量锁：semaphore（一次可以放行特定个）")])])]),t._v(" "),s("h2",{attrs:{id:"_1、lock-同步锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、lock-同步锁"}},[t._v("#")]),t._v(" 1、Lock() 同步锁")]),t._v(" "),s("h3",{attrs:{id:"基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("Lock锁的称呼有很多，如：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("同步锁")])]),t._v(" "),s("li",[s("p",[t._v("互斥锁")])])]),t._v(" "),s("p",[t._v("它们是什么意思呢？如下所示：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("互斥指的是某一资源同一时刻仅能有一个访问者对其进行访问，具有唯一性和排他性，但是互斥无法限制访问者对资源的访问顺序，即访问是无序的")])]),t._v(" "),s("li",[s("p",[t._v("同步是指在互斥的基础上（大多数情况），通过其他机制实现访问者对资源的有序访问")])]),t._v(" "),s("li",[s("p",[t._v("同步其实已经实现了互斥，是互斥的一种更为复杂的实现，因为它在互斥的基础上实现了有序访问的特点")])])]),t._v(" "),s("p",[t._v("下面是threading模块与同步锁提供的相关方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("threading.Lock()")]),t._v(" "),s("td",[t._v("返回一个同步锁对象")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.acquire(blocking=True, timeout=1)")]),t._v(" "),s("td",[t._v("上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.release()")]),t._v(" "),s("td",[t._v("解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.locaked()")]),t._v(" "),s("td",[t._v("判断该锁对象是否处于上锁状态，返回一个布尔值")])])])]),t._v(" "),s("h3",{attrs:{id:"使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("p",[t._v("同步锁一次只能放行一个线程，一个被加锁的线程在运行时不会将执行权交出去，只有当该线程被解锁时才会将执行权通过系统调度交由其他线程。")]),t._v(" "),s("p",[t._v("如下所示(见原文)，使用同步锁解决最上面的问题：")]),t._v(" "),s("p",[t._v("这样这个代码就完全变成了串行的状态，对于这种计算密集型I/O业务来说，还不如直接使用串行化单线程执行来得快，所以这个例子仅作为一个示例，不能概述锁真正的用途。")]),t._v(" "),s("h3",{attrs:{id:"死锁现象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁现象"}},[t._v("#")]),t._v(" 死锁现象")]),t._v(" "),s("p",[t._v("对于同步锁来说，一次acquire()必须对应一次release()，不能出现连续重复使用多次acquire()后再重复使用多次release()的操作，这样会引起死锁造成程序的阻塞，完全不动了，如下所示：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"with语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with语句"}},[t._v("#")]),t._v(" with语句")]),t._v(" "),s("p",[t._v("由于threading.Lock()对象中实现了__enter__()与__exit__()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import threading\nnum = 0\ndef add():\n\twith lock:       \n\t# 自动加锁        \n\tglobal num        \n\tfor i in range(10_000_000): \n\t\tnum += 1     \n\t# 自动解锁\n\t\t\ndef sub():\n    with lock:\n        # 自动加锁\n        global num\n        for i in range(10_000_000):\n            num -= 1\n        # 自动解锁\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h2",{attrs:{id:"_2、rlock-递归锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、rlock-递归锁"}},[t._v("#")]),t._v(" 2、RLock() 递归锁")]),t._v(" "),s("h3",{attrs:{id:"基本介绍-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-2"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("递归锁是同步锁的一个升级版本，在同步锁的基础上可以做到连续重复使用多次acquire()后再重复使用多次release()的操作，但是一定要注意加锁次数和解锁次数必须一致，否则也将引发死锁现象。")]),t._v(" "),s("p",[t._v("下面是threading模块与递归锁提供的相关方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("threading.RLock()")]),t._v(" "),s("td",[t._v("返回一个递归锁对象")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.acquire(blocking=True, timeout=1)")]),t._v(" "),s("td",[t._v("上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.release()")]),t._v(" "),s("td",[t._v("解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.locaked()")]),t._v(" "),s("td",[t._v("判断该锁对象是否处于上锁状态，返回一个布尔值")])])])]),t._v(" "),s("h3",{attrs:{id:"使用方式-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式-2"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("p",[t._v("以下是递归锁的简单使用，下面这段操作如果使用同步锁则会发生死锁现象，但是递归锁不会：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import threading\n\nnum = 0\n\n\ndef add():\n    lock.acquire()\n    lock.acquire()\n    global num\n    for i in range(10_000_000):\n        num += 1\n    lock.release()\n    lock.release()\n\n\ndef sub():\n    lock.acquire()\n    lock.acquire()\n    global num\n    for i in range(10_000_000):\n        num -= 1\n    lock.release()\n    lock.release()\n\n\nif __name__ == "__main__":\n    lock = threading.RLock()\n\n    subThread01 = threading.Thread(target=add)\n    subThread02 = threading.Thread(target=sub)\n\n    subThread01.start()\n    subThread02.start()\n\n    subThread01.join()\n    subThread02.join()\n\n    print("num result : %s" % num)\n\n# 结果三次采集\n# num result : 0\n# num result : 0\n# num result : 0\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br")])]),s("h3",{attrs:{id:"with语句-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with语句-2"}},[t._v("#")]),t._v(" with语句")]),t._v(" "),s("p",[t._v("由于threading.RLock()对象中实现了__enter__()与__exit__()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_3、condition-条件锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、condition-条件锁"}},[t._v("#")]),t._v(" 3、Condition() 条件锁")]),t._v(" "),s("h3",{attrs:{id:"基本介绍-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-3"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("条件锁是在递归锁的基础上增加了能够暂停线程运行的功能。并且我们可以使用wait()与notify()来控制线程执行的个数。")]),t._v(" "),s("p",[t._v("注意：条件锁可以自由设定一次放行几个线程。")]),t._v(" "),s("p",[t._v("下面是threading模块与条件锁提供的相关方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("threading.Condition()")]),t._v(" "),s("td",[t._v("返回一个条件锁对象")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.acquire(blocking=True, timeout=1)")]),t._v(" "),s("td",[t._v("上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.release()")]),t._v(" "),s("td",[t._v("解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.wait(timeout=None)")]),t._v(" "),s("td",[t._v("将当前线程设置为“等待”状态，只有该线程接到“通知”或者超时时间到期之后才会继续运行，在“等待”状态下的线程将允许系统根据策略自行切换到其他线程中运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.wait_for(predicate, timeout=None)")]),t._v(" "),s("td",[t._v("将当前线程设置为“等待”状态，只有该线程的predicate返回一个True或者超时时间到期之后才会继续运行，在“等待”状态下的线程将允许系统根据策略自行切换到其他线程中运行。注意：predicate参数应当传入一个可调用对象，且返回结果为bool类型")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.notify(n=1)")]),t._v(" "),s("td",[t._v("通知一个当前状态为“等待”的线程继续运行，也可以通过参数n通知多个")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.notify_all()")]),t._v(" "),s("td",[t._v("通知所有当前状态为“等待”的线程继续运行")])])])]),t._v(" "),s("h3",{attrs:{id:"使用方式-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式-3"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("p",[t._v("下面这个案例会启动10个子线程，并且会立即将10个子线程设置为等待状态。")]),t._v(" "),s("p",[t._v("然后我们可以发送一个或者多个通知，来恢复被等待的子线程继续运行：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"with语句-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with语句-3"}},[t._v("#")]),t._v(" with语句")]),t._v(" "),s("p",[t._v("由于threading.Condition()对象中实现了__enter__()与__exit__()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_4、event-事件锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、event-事件锁"}},[t._v("#")]),t._v(" 4、Event() 事件锁")]),t._v(" "),s("h3",{attrs:{id:"基本介绍-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-4"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。")]),t._v(" "),s("p",[t._v("我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。")]),t._v(" "),s("p",[t._v("下面是threading模块与事件锁提供的相关方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("threading.Event()")]),t._v(" "),s("td",[t._v("返回一个事件锁对象")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.clear()")]),t._v(" "),s("td",[t._v("将事件锁设为红灯状态，即所有线程暂停运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.is_set()")]),t._v(" "),s("td",[t._v("用来判断当前事件锁状态，红灯为False，绿灯为True")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.set()")]),t._v(" "),s("td",[t._v("将事件锁设为绿灯状态，即所有线程恢复运行")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.wait(timeout=None)")]),t._v(" "),s("td",[t._v("将当前线程设置为“等待”状态，只有该线程接到“绿灯通知”或者超时时间到期之后才会继续运行，在“等待”状态下的线程将允许系统根据策略自行切换到其他线程中运行")])])])]),t._v(" "),s("h3",{attrs:{id:"使用方式-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式-4"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("p",[t._v("事件锁不能利用with语句来进行使用，只能按照常规方式。")]),t._v(" "),s("p",[t._v("如下所示，我们来模拟线程和红绿灯的操作，红灯停，绿灯行：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_5、semaphore-信号量锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、semaphore-信号量锁"}},[t._v("#")]),t._v(" 5、Semaphore() 信号量锁")]),t._v(" "),s("h3",{attrs:{id:"基本介绍-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-5"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("信号量锁也是根据条件锁来做的，它与条件锁和事件锁的区别如下：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("条件锁：一次可以放行任意个处于“等待”状态的线程")])]),t._v(" "),s("li",[s("p",[t._v("事件锁：一次可以放行全部的处于“等待”状态的线程")])]),t._v(" "),s("li",[s("p",[t._v("信号量锁：通过规定，成批的放行特定个处于“上锁”状态的线程")])])]),t._v(" "),s("p",[t._v("下面是threading模块与信号量锁提供的相关方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("threading.Semaphore()")]),t._v(" "),s("td",[t._v("返回一个信号量锁对象")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.acquire(blocking=True, timeout=1)")]),t._v(" "),s("td",[t._v("上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒")])]),t._v(" "),s("tr",[s("td",[t._v("lockObject.release()")]),t._v(" "),s("td",[t._v("解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行")])])])]),t._v(" "),s("h3",{attrs:{id:"使用方式-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式-5"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("p",[t._v("以下是使用示例，你可以将它当做一段限宽的路段，每次只能放行相同数量的线程：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"with语句-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with语句-4"}},[t._v("#")]),t._v(" with语句")]),t._v(" "),s("p",[t._v("由于threading.Semaphore()对象中实现了__enter__()与__exit__()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"锁关系浅析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁关系浅析"}},[t._v("#")]),t._v(" 锁关系浅析")]),t._v(" "),s("p",[t._v("上面5种锁可以说都是基于同步锁来做的，这些你都可以从源码中找到答案。")]),t._v(" "),s("p",[t._v("首先来看RLock递归锁，递归锁的实现非常简单，它的内部会维护着一个计数器，当计数器不为0的时候该线程不能被I/O操作和时间轮询机制切换。但是当计数器为0的时候便不会如此了：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("def __init__(self):\n\tself._block = _allocate_lock()\n\tself._owner = None    \n\tself._count = 0  # 计数器\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("而Condition条件锁的内部其实是有两把锁的，一把底层锁（同步锁）一把高级锁(递归锁)。")]),t._v(" "),s("p",[t._v("低层锁的解锁方式有两种，使用wait()方法会暂时解开底层锁同时加上一把高级锁，只有当接收到别的线程里的notfiy()后才会解开高级锁和重新上锁低层锁，也就是说条件锁底层是根据同步锁和递归锁的不断切换来进行实现的：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Event事件锁内部是基于条件锁来做的：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Semaphore信号量锁内部也是基于条件锁来做的：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"基本练习题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本练习题"}},[t._v("#")]),t._v(" 基本练习题")]),t._v(" "),s("h3",{attrs:{id:"条件锁的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件锁的应用"}},[t._v("#")]),t._v(" 条件锁的应用")]),t._v(" "),s("p",[t._v("需求：一个空列表，两个线程轮番往里面加值（一个加偶数，一个加奇数），最终让该列表中的值为 1 - 100 ，且是有序排列的。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"事件锁的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件锁的应用"}},[t._v("#")]),t._v(" 事件锁的应用")]),t._v(" "),s("p",[t._v("有2个任务线程来扮演李白和杜甫，如何让他们一人一句进行对答？文本如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("杜甫：老李啊，来喝酒！")]),t._v(" "),s("p",[t._v("李白：老杜啊，不喝了我喝不下了！")]),t._v(" "),s("p",[t._v("杜甫：老李啊，再来一壶？")]),t._v(" "),s("p",[t._v("杜甫：...老李？")]),t._v(" "),s("p",[t._v("李白：呼呼呼...睡着了..")])]),t._v(" "),s("p",[t._v("代码如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原文https://mp.weixin.qq.com/s/E0ukAQk281-NWjnasnZcpg\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);